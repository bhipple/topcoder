// {{{ Boilerplate Code <--------------------------------------------------
// vim:filetype=cpp:foldmethod=marker:foldmarker={{{,}}}

#include <algorithm>
#include <bitset>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>

#define FOR(I,A,B) for(int I = (A); I < (B); ++I)
#define REP(I,N)   FOR(I,0,N)
#define ALL(A)     (A).begin(), (A).end()

using namespace std;

// }}}

class IncrementingSequence
{
public:
    string canItBeDone(int k, vector <int> A)
    {
        sort(A.begin(), A.end());

        int i = 0;
        int target = 1;
        while(target <= A.size()) {
            if(A[i] == target) {
                ++target;
                ++i;
                continue;
            }

            if(A[i] < target) {
                A[i] = A[i] + k;
                sort(A.begin(), A.end());
                continue;
            }

            if(A[i] > target) {
                return "IMPOSSIBLE";
            }
        }

        return "POSSIBLE";
    }
};


// Edited by VimCoder 0.3.5
// http://github.com/chazmcgarvey/vimcoder