// ============================================================================
//                               Configurables
// ============================================================================
const bool USE_COLOR = false;

// ============================================================================
//                                  Driver
// ============================================================================
#include "$CLASSNAME$.cc"

#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <sys/time.h>
#include <vector>


const static double __EPSILON = 1e-9;
static double __time = 0.0;

static void __timer_start()
{
    struct timeval tv;
    if (gettimeofday(&tv, NULL) == 0)
    {
        __time = double(tv.tv_sec) * 1000.0 + double(tv.tv_usec) * 0.001;
    }
}

static double __timer_stop()
{
    double start = __time;
    __timer_start();
    return __time - start;
}


static void __eat_whitespace(std::istream& in)
{
    while (in.good() && std::isspace(in.peek())) in.get();
}


std::ostream& operator << (std::ostream& out, const std::string& str)
{
    out << '"' << str.c_str() << '"';
    return out;
}

template <class T>
std::ostream& operator << (std::ostream& out, const std::vector<T>& vec)
{
    out << '{';
    if (0 < vec.size())
    {
        out << vec[0];
        for (size_t i = 1; i < vec.size(); ++i) out << ", " << vec[i];
    }
    out << '}';
    return out;
}

std::istream& operator >> (std::istream& in, std::string& str)
{
    __eat_whitespace(in);

    int c;
    if (in.good() && (c = in.get()) == '"')
    {
        std::ostringstream s;
        while (in.good() && (c = in.get()) != '"')
        {
            s.put(char(c));
        }
        str = s.str();
    }

    return in;
}

template <class T>
std::istream& operator >> (std::istream& in, std::vector<T>& vec)
{
    __eat_whitespace(in);

    int c;
    if (in.good() && (c = in.get()) == '{')
    {
        __eat_whitespace(in);
        vec.clear();
        while (in.good() && (c = in.get()) != '}')
        {
            if (c != ',') in.putback(c);

            T t;
            in >> t;
            __eat_whitespace(in);

            vec.push_back(t);
        }
    }

    return in;
}


template <class T>
bool __equals(const T& actual, const T& expected)
{
    return actual == expected;
}

bool __equals(double actual, double expected)
{
    if (std::abs(actual - expected) < __EPSILON)
    {
        return true;
    }
    else
    {
        double minimum = std::min(expected * (1.0 - __EPSILON), expected * (1.0 + __EPSILON));
        double maximum = std::max(expected * (1.0 - __EPSILON), expected * (1.0 + __EPSILON));
        return actual > minimum && actual < maximum;
    }
}

bool __equals(const std::vector<double>& actual, const std::vector<double>& expected)
{
    if (actual.size() != expected.size())
    {
        return false;
    }

    for (size_t i = 0; i < actual.size(); ++i)
    {
        if (!__equals(actual[i], expected[i]))
        {
            return false;
        }
    }

    return true;
}

// Coloring, thanks to Joel Sjogren
namespace Color {
    enum Code {
        FG_RED      = 31,
        FG_GREEN    = 32,
        FG_BLUE     = 34,
        FG_CYAN     = 36,
        FG_DEFAULT  = 39,
        BG_RED      = 41,
        BG_GREEN    = 42,
        BG_BLUE     = 44,
        BG_DEFAULT  = 49
    };
    class Modifier {
        Code code;
    public:
        Modifier(Code pCode) : code(pCode) {}
        friend std::ostream&
        operator<<(std::ostream& os, const Modifier& mod) {
            if(USE_COLOR)
                return os << "\033[" << mod.code << "m";
            else
                return os;
        }
    };
}

int main(int argc, char* argv[])
{
    bool    abortOnFail = false;
    int    passCt = 0;
    int    failCt = 0;

    if (1 < argc) abortOnFail = true;

    Color::Modifier def(Color::FG_DEFAULT);
    Color::Modifier green(Color::FG_GREEN);
    Color::Modifier red(Color::FG_RED);
    Color::Modifier cyan(Color::FG_CYAN);
    std::cout << cyan << "[==========] Running Test Suite" << def << std::endl;
    std::cout.flush();

    std::ifstream __in("testcases.txt");
    for(;;) {
        // Get Test Info
        int __testnum = passCt + failCt;
        $RETURNTYPE$ expected;
        $METHODPARAMDECLARES$
        __in >> expected >> $METHODPARAMSTREAMIN$;
        if (!__in.good()) break;

        // Run Test
        __timer_start();
        $CLASSNAME$ __object;
        $RETURNTYPE$ actual = __object.$METHODNAME$($METHODPARAMNAMES$);
        double __t = __timer_stop();

        Color::Modifier testColor = red;
        bool passed = false;
        if (__equals(actual, expected)) {
            passed = true;
            testColor = green;
            ++passCt;
        }
        else {
            ++failCt;
        }

        // Print Results
        std::cout << testColor << "[----------] " << def << std::endl;
        std::cout << testColor << "[ RUN " << __testnum << "    ] " << def << "Input  : " << $METHODPARAMSTREAMOUT$ << std::endl;
        std::cout << testColor << "[          ] " << def << "Expect : " << expected << std::endl;
        if(passed) {
            std::cout << testColor << "[  PASSED  ]" << def << std::endl;
        }
        else {
            std::cout << testColor << "[  FAILED  ] " << def << "Actual : " << actual << std::endl;
        }
        std::cout << testColor << "[----------] " << def << "<" << __t << "ms>"  << std::endl << std::endl;
        std::cout.flush();

        if (abortOnFail && failCt) std::abort();
    }


    // Results of test suite run
    std::cout <<  green
          << "[==========]" << std::endl
          << "[  PASSED  ] " << def << passCt << std::endl;
    if(failCt) {
        std::cout << red << "[  FAILED  ] " << def << failCt << std::endl;
        std::cout << red << "[==========]" << std::endl;
    }
    else {
        std::cout << green << "[  FAILED  ] " << def << failCt << std::endl;
        std::cout << green << "[==========]" << std::endl;
    }


    if(!failCt) {
        std::cout << std::endl << cyan
              << "# Nice! Don't forget to compile remotely before submitting." << std::endl;
    }

    return failCt;
}

// vim:ft=cpp:noet:ts=8
